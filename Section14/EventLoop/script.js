'use strict';

class Country {
  static btn = document.querySelector('.btn-country');
  static container = document.querySelector('.countries');

  #countryCode;

  getCountryAndNeighbourByCode(countryCode) {
    this.#countryCode = countryCode;
    this.#getResponse(
      `https://restcountries.com/v3.1/alpha/${countryCode}`,
      '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
    )
      .then(this.#displayCountryAndGetNeighbour.bind(this))
      .then(this.#displayNeighbour.bind(this))
      .catch(this.#displayError.bind(this))
      .finally(this.#showContainer.bind(this));
    this.#hideBtn();
  }

  async #getResponse(url, errorMessage = '–û—à–∏–±–∫–∞') {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(errorMessage);
    }
    return await response.json();
  }

  #displayCountryAndGetNeighbour(data) {
    this.#displayCountry(data[0]);
    if (!data[0].borders) {
      throw new Error('–ù–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω');
    }
    const firstNeighbour = data[0].borders[0];
    return this.#getResponse(
      `https://restcountries.com/v3.1/alpha/${firstNeighbour}`,
      '–ù–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω',
    );
  }

  #displayNeighbour(data) {
    this.#displayCountry(data[0], 'neighbour');
  }

  #displayCountry(data, className = '') {
    const currencies = data.currencies;
    const currensyName = Object.values(currencies)[0].name;
    const currensySymbol = Object.values(currencies)[0].symbol;

    const languages = data.languages;
    const firstLanguage = Object.values(languages)[0];

    const html = `
      <article class="country ${className}" data-country="${data.cca2.toLowerCase()}">
        <img class="country__img" src="${data.flags.svg}" />
        <div class="country__data">
          <h3 class="country__name">${data.name.common}</h3>
          <h4 class="country__region">${data.region}</h4>
          <p class="country__row"><span>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>${(
            +data.population / 1000000
          ).toFixed(1)} –º–∏–ª–ª–∏–æ–Ω–æ–≤</p>
          <p class="country__row"><span>üó£Ô∏è</span>${firstLanguage}</p>
          <p class="country__row"><span>üí∞</span>${currensySymbol} ${currensyName}</p>
        </div>
      </article>
      `;

    if (className) {
      document
        .querySelector(`article[data-country="${this.#countryCode}"]`)
        .insertAdjacentHTML('afterend', html);
    } else {
      Country.container.insertAdjacentHTML('beforeend', html);
    }
  }

  #displayError(e) {
    Country.container.insertAdjacentText(
      'beforeend',
      `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: ${e.message}`,
    );
  }

  #showContainer() {
    Country.container.style.opacity = 1;
  }

  #hideBtn() {
    Country.btn.style.display = 'none';
  }
}

Country.btn.addEventListener('click', function () {
  new Country().getCountryAndNeighbourByCode('ru');
});

// console.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞');
// setTimeout(() => {
//   console.log('–¢–∞–π–º–µ—Ä 0 —Å–µ–∫—É–Ω–¥');
// }, 0);
// Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ Promise.resolve()').then((result) =>
//   console.log(result),
// );
// Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ Promise.resolve(for)').then((result) => {
//   for (let i = 0; i < 1000000000; i++) {}
//   console.log(result);
// });
// console.log('–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞');

const lotteryPromise = new Promise(function (resolve, reject) {
  console.log('–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É—Ç–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞:');
  setTimeout(function () {
    if (Math.random() >= 0.5) {
      resolve('–¶–∑–∏–Ω–ª—é');
    } else {
      reject(new Error('–Ø–Ω—å—Ü–∏–Ω'));
    }
  }, 1000);
});

lotteryPromise.then((res) => console.log(res)).catch((e) => console.error(e));

const wait = function (seconds) {
  return new Promise(function (resolve) {
    setTimeout(resolve, seconds * 1000);
  });
};

wait(1)
  .then(() => {
    console.log('–ü—Ä–æ—à–ª–∞ 1 —Å–µ–∫—É–Ω–¥–∞');
    return wait(1);
  })
  .then(() => {
    console.log('–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã');
    return wait(1);
  })
  .then(() => {
    console.log('–ü—Ä–æ—à–ª–æ 3 —Å–µ–∫—É–Ω–¥—ã');
    return wait(1);
  })
  .then(() => {
    console.log('–ü—Ä–æ—à–ª–æ 4 —Å–µ–∫—É–Ω–¥—ã');
  });

Promise.resolve('Resolved').then((res) => console.log(res));
Promise.reject(new Error('Rejected')).catch((e) => console.error(e));
